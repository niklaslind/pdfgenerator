{
  "name": "html-pdf",
  "version": "0.2.1",
  "description": "HTML to PDF converter that uses phantomjs",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "grunt test"
  },
  "author": {
    "name": "Marc Bachmann"
  },
  "license": "MIT",
  "devDependencies": {
    "coffee-script": "^1.7.1",
    "chai": "^1.9.1",
    "grunt-mocha-test": "^0.10.2",
    "grunt": "^0.4.4",
    "mocha": "^1.18.2",
    "grunt-contrib-watch": "^0.6.1"
  },
  "dependencies": {
    "phantomjs": "^1.9.7-8"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/marcbachmann/node-html-pdf.git"
  },
  "keywords": [
    "html",
    "pdf",
    "phantom",
    "phantomjs",
    "nodejs"
  ],
  "bugs": {
    "url": "https://github.com/marcbachmann/node-html-pdf/issues"
  },
  "homepage": "https://github.com/marcbachmann/node-html-pdf",
  "readme": "# node-html-pdf\n## a HTML to PDF converter that wraps phantomjs\n![image](http://public.admintools.ch/gh/html-pdf/businesscard.png)  \n[Example Business Card](http://public.admintools.ch/gh/html-pdf/businesscard.pdf)  \n -> [and its Source file](test/businesscard.html)  \n\n[Example Receipt](http://public.admintools.ch/gh/html-pdf/order.pdf)\n\n\n```javascript\nvar fs = require('fs');\nvar pdf = require('./lib');\nvar html = fs.readFileSync('./test/businesscard.html', 'utf8')\npdf.create(html, { width: '50mm', height: '90mm'}, function(err, buffer) {\n  if (err) return console.log(err);\n  fs.writeFile('businesscard.pdf', buffer);\n});\n```\n\n## API\nCurrently there is only one function\n```javascript\nvar pdf = require('html-pdf');\nvar callback = function(err, buffer){}\npdf.create(htmlString, options, callback)\n```\n\n## Options\n```javascript\nconfig = {\n  // Script options\n  script: '/url'             // Absolute path to a custom phantomjs script, use the file in lib/scripts as example\n  timeout: 10000           // Timeout that will cancel phantomjs, in milliseconds\n\n  // Papersize Options: http://phantomjs.org/api/webpage/property/paper-size.html\n  \"height\": \"\",              // allowed units: mm, cm, in, px\n  \"width\": \"\",               // allowed units: mm, cm, in, px\n  - or -\n  \"format\": \"A4\",            // allowed units: A3, A4, A5, Legal, Letter, Tabloid\n  \"orientation\": \"portrait\", // portrait or landscape\n\n\n  // Page options\n  \"border\": \"0\"              // default is 0, units: mm, cm, in, px\n  \"header\": {\n    \"height\": \"45mm\",\n    \"contents\": '<div style=\"text-align: center;\">Author: Marc Bachmann</div>'\n  },\n  \"footer\": {\n    \"height\": \"28mm\",\n    \"contents\": '<span style=\"color: #444;\">{{page}}</span>/<span>{{pages}}</span>'\n  },\n  \n\n  // File options\n  \"type\": \"pdf\",             // allowed file types: png, jpeg, pdf\n  \"quality\": \"75\",           // only used for types png & jpeg\n\n\n  // Export options\n  \"buffer\": true,            // only supported on certain systems\n  - or -\n  \"filename\": \"/tmp/html-pdf-123-123.pdf\" // The file path of the file that will be written. If you want to save the file permanently, you have to pass this option.\n  \"directory\": \"/tmp\"        // The directory the file gets written into if no filename is defined. default: '/tmp' \n}\n```\n\nThe full options object gets converted to JSON and will get passed to the phantomjs script as third argument.  \nThere are more options concerning the paperSize, header & footer options inside the phantomjs script.\n",
  "readmeFilename": "README.md",
  "_id": "html-pdf@0.2.1",
  "_from": "html-pdf@0.2.x"
}
